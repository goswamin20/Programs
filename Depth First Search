import java.util.Iterator;
import java.util.LinkedList;
import java.util.Stack;


public class Lab10 {

	static class Edge
	{
		int V;
        LinkedList<Integer>[] adj;
        
		public Edge(int V)
        {
            this.V = V;
            
            adj = new LinkedList[V];
             
            for (int i = 0; i < adj.length; i++)
                adj[i] = new LinkedList<Integer>();
             
        }
  
        void addEdge(int u, int v) {
            adj[u].add(v);
        }
         
        Boolean pathExists(int s, int d)
        {
            LinkedList<Integer>temp;
            boolean visited[] = new boolean[V];
     
            Stack<Integer> stack = new Stack<Integer>();

            visited[s]=true;
            stack.push(s);

            Iterator<Integer> i;
            while (!stack.isEmpty())
            {
                s = stack.pop();
     
                int n;
                i = adj[s].listIterator();
     
                while (i.hasNext())
                {
                    n = i.next();

                    if (n==d)
                        return true;
                    if (!visited[n])
                    {
                        visited[n] = true;
                        stack.push(n);
                    }
                }
            }
            return false;
        }
	}

	public static void main(String args[])
	{
		Edge E = new Edge(10);
        E.addEdge(0, 1);
        E.addEdge(1, 2);
        E.addEdge(2, 3);
        E.addEdge(1, 3);
        E.addEdge(7, 6);
        E.addEdge(6, 8);
        E.addEdge(8, 9);
        E.addEdge(9, 6);
        E.addEdge(5, 4);
        E.addEdge(4, 3);
 
        int u = 7;
        int v = 3;
        if (E.pathExists(u, v))
            System.out.println("A path exists from " + u +" to " + v);
        else
            System.out.println("No path exists from " + u +" to " + v);
	}
}


