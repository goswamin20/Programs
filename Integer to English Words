class Solution {
    String[] smalls={"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten",
                        "Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
        
        String[] tens={"","","Twenty","Thirty","Forty","Fifty","Sixty","Seventy","Eighty","Ninety"};
        
        String[] bigs={"","Thousand", "Million","Billion"};
        
        String hundred="Hundred";
    public String numberToWords(int num) {
       if(num==0){
           return "Zero";
       }
        LinkedList<String> parts=new LinkedList<>();
        int count=0;
        
        while(num>0){
            if(num%1000!=0){
                String result=new Solution().word(num%1000)+" "+bigs[count]; 
                parts.addFirst(result);
            }
            num=num/1000;
            count++;
        }
        
        return new Solution().listtoString(parts).trim();
    }
    
    public String word(int num){
        LinkedList<String> parts=new LinkedList<>();
        
        if (num>=100){
            parts.addLast(smalls[num/100]);
            parts.addLast(hundred);
            num=num%100;
        }    
        
        if(num>=10 && num<=19){
            parts.addLast(smalls[num]);
        }else if(num>=20){
            parts.addLast(tens[num/10]);
            num=num%10;
        }
        
        if(num>=1 && num<=9){
            parts.addLast(smalls[num]);
        }
        
       return new Solution().listtoString(parts);
    
    }
    
    String listtoString(LinkedList<String> parts){
        StringBuilder sb=new StringBuilder();
        while(parts.size()>1){
            sb.append(parts.pop());
            sb.append(" ");
        }
        sb.append(parts.pop());
        return sb.toString().trim();
    }
}
