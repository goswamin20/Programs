public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalLen=nums1.length+nums2.length;
        if(totalLen<2){
            if(nums1.length==1)
                return (double)nums1[0];
            else if (nums2.length==1)
                return (double)nums2[0];
        }
        int mid=((totalLen)%2==0)?(totalLen/2)-1:(totalLen/2);
        int i=nums1.length-1, j=nums2.length-1;
        Queue<Integer> queue=new LinkedList<>();
        for(int k=totalLen;k>mid;k--){
            int val;
            if(i>=0 && j>=0){
                val=nums1[i]>nums2[j]?nums1[i--]:nums2[j--];
            }else if(i<0){
                val=nums2[j--];
            }else{
                val=nums1[i--];
            }
            if(queue.size()==2){
                    queue.poll();
                }
                queue.offer(val);
        }
        double median=0.0;
        if(totalLen%2==0){
            System.out.println("even"+queue);
           median= (double)(queue.poll()+queue.poll())/2.0;
            
        }else{
            System.out.println("odd"+queue);
            queue.poll();
             median= (double)queue.poll();
        }
        
        return median;
    }
}
